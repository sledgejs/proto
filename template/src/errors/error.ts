import { ErrorCode } from './errorCode';
import { ErrorLookup } from './errorLookup';

/**
 * Properties object used to create an {@link Error}.
 */
export type ErrorProps = {
  /** @inheritDoc Error.source */
  source?: any | null;

  /** @inheritDoc Error.innerError */
  innerError?: Error | null;

  /** @inheritDoc Error.message */
  message?: string | null;

  /** @inheritDoc Error.displayMessage */
  displayMessage?: string | null;

  /** @inheritDoc Error.displayHeading */
  displayHeading?: string | null;
}

type Props = ErrorProps;

/**
 * Represents the singular class to be used for error objects.
 * You should not extend this object if you need custom errors but rather you should
 * extend the {@link ErrorCode} lookup object through additional codes.
 */
export class Error {

  /**
   * Creates a new instance of the {@link Error} class.
   * @param code  The {@link ErrorCode} of the error. 
   *              Each code should have a set of predefined settings 
   *              which are automatically set on the `Error` instance
   * @param props Additional properties to set on the instance.
   *              Any property provided here will overwrite properties which come 
   *              from the code.
   */
  constructor(code: ErrorCode, props: Props = {}) {

    const info = ErrorLookup[code] ?? null;

    this.code = code;
    this.message = info?.message ?? `An error has occurred.`;
    this.displayHeading = info?.displayHeading ?? null;
    this.displayMessage = info?.displayMessage ?? this.message;

    this.source = props.source ?? null;

    this.innerError = props.innerError ?? null;
  }

  /**
   * The unique code of the error.
   */
  readonly code: ErrorCode;

  /**
   * The message that should be shown to developers, in consoles, logs, etc.
   * If, when initializing, no {@link Error#displayMessage} has been set,
   * then the display message will also be set to use this message.
   */
  readonly message: string;
  
  /**
   * The message that should be shown to users. If no value is provided then
   * the value set for {@link IError#message} will be used.
   */
  readonly displayMessage: string;
  
  /**
   * The heading that should be shown to users in error components which show
   * both a message and a heading.
   */
  readonly displayHeading: string | null;
  
  /**
   * The object on which this Error will be based.
   * Can be an API response object, a response string, a native Error instance, etc.
   * If the source object is also an {@link Error} object, use {@link Error#innerError} instead.
   */
  readonly source: any | null = null;
  
  /**
   * Used when the {@link Error} to be instanced is based on another {@link Error} 
   * and you want to keep track of the original error.
   * If the object on which this error is based is not an instance of {@link Error},
   * but it is of another type, use {@link Error#source} instead.
   */
  readonly innerError: Error | null = null;
  
  /**
   * The list of errors used when the error code is `ErrorGroup`.
   */
  readonly childErrors: Error[] = [];
  
  /**
   * Flag that indicates if the error can be generated by User action.
   */
  readonly canBeUserTriggered: boolean | null = null;
}