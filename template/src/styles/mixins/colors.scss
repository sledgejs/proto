$component-text-colors: (
  "primary": (
    "fill": (
      "default": var(--text-primary),
    )
  ),
  "secondary": (
    "fill": (
      "default": var(--text-secondary),
    )
  )
);

$component-background-colors: (
  "primary": (
    "fill": (
      "default": var(--primary-700),
      "hover": var(--primary-500),
      "focus": var(--primary-800),
      "active": var(--primary-900),
      "disabled": var(--primary-700),
    )
  ),
  "secondary": (
    "fill": (
      "default": var(--secondary-700),
      "hover": var(--secondary-500),
      "focus": var(--secondary-800),
      "active": var(--secondary-900),
      "disabled": var(--secondary-700),
    )
  ),
  "tertiary": (
    "fill": (
      "default": var(--neutral-3),
      "hover": var(--neutral-5),
      "focus": var(--neutral-3),
      "active": var(--neutral-10),
      "disabled": var(--neutral-0),
    )
  ),
  "nuclear": (
    "fill": (
      "default": var(--neutral-0),
      "hover": var(--neutral-2),
      "focus": var(--neutral-0),
      "active": var(--neutral-3),
      "disabled": var(--neutral-0),
    )
  ),
);

$component-border-colors: (
  "primary": (
    "fill": (
      "default": var(--background-color),
      "focus": var(--outline-color),
    )
  ),
  "secondary": (
    "fill": (
      "default": var(--neutral-20),
      "hover": var(--neutral-20),
      "focus": var(--outline-color),
      "active": var(--neutral-20),
    )
  )
);

$component-outline-colors: (
  "primary": (
    "fill": var(--neutral-100),
    "inverse": var(--neutral-0),
  ),
  "secondary": (
    "fill": var(--primary-100),
    "inverse": var(--on-black-blue),
  )
);

@mixin component-text-color($scheme, $variant, $state: "default") {
  $state-lookup: map-get($component-text-colors, $scheme, $variant);

  @if (map-has-key($state-lookup, $state)) {
    --text-color: #{map-get($state-lookup, $state)};
  } @else {
    --text-color: #{map-get($state-lookup, "default")};
  }
}

@mixin component-background-color($scheme, $variant, $state: "default") {
  $state-lookup: map-get($component-background-colors, $scheme, $variant);

  @if (map-has-key($state-lookup, $state)) {
    --background-color: #{map-get($state-lookup, $state)};
  } @else {
    --background-color: #{map-get($state-lookup, "default")};
  }
}

@mixin component-border-color($scheme, $variant, $state: "default") {
  $state-lookup: map-get($component-border-colors, $scheme, $variant);

  @if (map-has-key($state-lookup, $state)) {
    --border-color: #{map-get($state-lookup, $state)};
  } @else {
    --border-color: #{map-get($state-lookup, "default")};
  }
}

@mixin component-outline-color($scheme, $variant) {
  --outline-color: #{map-get($component-outline-colors, $scheme, $variant)};
}

@mixin component-color($scheme, $variant, $state: "default") {
  @include component-text-color($scheme, $variant, $state);
  @include component-background-color($scheme, $variant, $state);
  @include component-border-color($scheme, $variant, $state);
  @include component-outline-color($scheme, $variant);
}

@mixin component-color-with-states($scheme, $variant) {
  @include component-color($scheme, $variant);

  &:hover,
  &.hover {
    @include component-color($scheme, $variant, "hover");
  }

  &:focus-visible,
  &.focus {
    @include component-color($scheme, $variant, "focus");
  }

  &:active,
  &.active {
    @include component-color($scheme, $variant, "active");
  }

  &[disabled="disabled"],
  &.disabled {
    @include component-color($scheme, $variant, "disabled");
  }
}
